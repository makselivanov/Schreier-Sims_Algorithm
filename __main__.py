from group import StabChain
from permutation import Permutation


def test():
    pass


def main():
    perm = Permutation(size=54)  # В начале дня
    data = [26 + i if i < 28 else i - 28 for i in range(54)]
    sigma1 = Permutation(size=54, perm=data)
    # Перестановка, при перемножении слева дает первое движение
    data = [i + 2 if i < 52 else i - 52 for i in range(54)]
    sigma2 = Permutation(size=54, perm=data) * sigma1
    # Перестановка, при перемножении слева дает первое + второе движение
    # Считаем колоду отсортированной в самом начале
    # По условию, первая показанная карта(под номером 26 с нуля) была туз пик, тогда
    # 1. Нужно найти вероятность того, что после нескольких фокусов
    #    точка осталось неподвижной
    # 2. Может ли точка принимать значение 24, что является дамой той же масти.
    print("Нумерация введется с нуля")
    print("Вторая перестановка включает первую операцию, "
          "так как между фокусами хотя-бы одна операция первого типа была")
    print("Первая операция, которая делит перестановку пополам, "
          "меняет их местами и потом нижнуюю карту кладет в вверх")
    print("s1: ", sigma1)
    print("Вторая операция, которая сначало кладет вторую карту сверху в самый низ, "
          "потом кладет верхнуюю карту в самой них")
    print("s2: ", sigma2)
    if sigma1 * sigma2 == sigma2 * sigma1:
        print("Первая и вторая операции являются коммутативными")
        print("Найдем подгруппу, порожденную этими двумя операциями")
        gen = [sigma1, sigma2]
        base = [(26 if i == 0 else i - 1) if i < 27 else i for i in range(54)]
        chain = StabChain(gen=gen, base=base)
        print("Вероятность, что туз останеться на месте = ", 1 / len(chain.get_first_orbit()))
        print("Посмотрим на орбиту числа 26")
        print(chain.get_first_orbit())
        print("Видно, что число 24 есть в орбите, то тогда есть вероятность того, "
              "что день может начаться с дамы пик")
        print("Пример:")
        print(chain.tree_list[0][24])
        for (perm, step) in chain.factoring(chain.tree_list[0][24]).items():
            print("Permutation: ", perm)
            print("Degree:      ", step)
        print("У нас получилась степень ноль для второй операции, "
              "что не может быть практически, но мы можем заменить "
              "ноль на порядок перестановки")
        print("0 -> ", sigma2.ord())


if __name__ == "__main__":
    test()
    main()
